name: ci
on: 
  push:
    branches: ["**"]
    tags:
      - '*'
  pull_request:

permissions:
  contents: write

jobs:
  build-and-test:
    name: >-
      CI
      ${{ matrix.os }}
      ${{ matrix.compiler }}
      ${{ matrix.optimized && 'release' || 'debug' }}
      ${{ matrix.build_shared_lib && 'shared_library' || 'static_library' }}
      ${{ matrix.use_cpm && 'cpm' || 'system_deps' }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [clang, gcc, msvc]
        os: [ubuntu-latest, macos-latest, windows-latest]
        optimized: [true, false]
        build_shared_lib: [true, false]
        use_cpm: [true, false]
        exclude:
          # MSVC only works on Windows.
          - os: ubuntu-latest
            compiler: msvc
          - os: macos-latest
            compiler: msvc
          # Not testing with GCC on macOS.
          - os: macos-latest
            compiler: gcc
          # Only testing with MSVC on Windows.
          - os: windows-latest
            compiler: clang
          - os: windows-latest
            compiler: gcc
        include:
          - compiler: clang
            CC: clang
            CXX: clang++
          - compiler: gcc
            CC: gcc
            CXX: g++
          # Only upload packages for CPM builds
          - use_cpm: true
            upload_package: true

    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/build
      CMAKE_BUILD_TYPE: ${{ matrix.optimized && 'RelWithDebInfo' || 'Debug' }}
      BUILD_SHARED_LIBS: ${{ matrix.build_shared_lib && 'ON' || 'OFF' }}
      CPP_SANDBOX_USE_CPM: ${{ matrix.use_cpm && 'ON' || 'OFF' }}
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      CPACK_GENERATOR: ${{ matrix.os == 'windows-latest' && 'ZIP' || 'TGZ' }}
      BINARY_SUFFIX: ${{ startsWith(matrix.os, 'windows') && '.exe' || '' }}
      BINARY_PATH: >-
        ${{ format(
        startsWith(matrix.os, 'windows') && '{0}\build\{1}\' || '{0}/build/',
        github.workspace,
        matrix.optimized && 'RelWithDebInfo' || 'Debug') }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest' && !matrix.use_cpm
        run: |
          sudo apt-get update
          sudo apt-get install -y catch2

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest' && !matrix.use_cpm
        run: |
          brew install catch2

      - name: Install system dependencies (Windows)
        if: matrix.os == 'windows-latest' && !matrix.use_cpm
        run: |
          vcpkg install catch2:x64-windows
          echo "CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV
        shell: bash

      - name: Generate build config
        run: >-
          cmake -S "${{ github.workspace }}" -B "${{ env.CMAKE_BUILD_DIR }}"
          -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }}
          -DBUILD_SHARED_LIBS=${{ env.BUILD_SHARED_LIBS }}
          -DCPP_SANDBOX_USE_CPM=${{ env.CPP_SANDBOX_USE_CPM }}
          -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/install_test/
          ${{ startsWith(matrix.os, 'windows') && !matrix.use_cpm && format('-DCMAKE_TOOLCHAIN_FILE={0}', env.CMAKE_TOOLCHAIN_FILE) || '' }}

      - name: Build
        run: >-
          cmake --build "${{ env.CMAKE_BUILD_DIR }}"
          --config "${{ env.CMAKE_BUILD_TYPE }}"

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest -C "${{ env.CMAKE_BUILD_TYPE }}" --verbose

      - name: Test CMake installation
        run: cmake --build "${{ env.CMAKE_BUILD_DIR }}" --target install

      - name: CPack
        working-directory: ${{ github.workspace }}/build
        run: |
          cpack -C "${{ env.CMAKE_BUILD_TYPE }}" -G "${{ env.CPACK_GENERATOR }}"

      - name: Upload package artifacts
        if: startsWith(github.ref, 'refs/tags/') && matrix.upload_package
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.os }}-${{ matrix.compiler }}-${{ matrix.optimized && 'release' || 'debug' }}-${{ matrix.build_shared_lib && 'shared' || 'static' }}
          path: |
            ${{ github.workspace }}/build/*.zip
            ${{ github.workspace }}/build/*.tar.gz
          retention-days: 30

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: cpp-sandbox ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            ./artifacts/**/*.zip
            ./artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
